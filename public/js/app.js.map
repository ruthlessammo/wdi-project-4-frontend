{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/comment.js","js/controllers/comments.js","js/controllers/main.js","js/router.js","js/services/soundcloud.js","js/directives/soundcloud.js","js/models/track.js","js/controllers/tracks.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","WhitelistSrc","$sceDelegateProvider","resourceUrlWhitelist","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Comment","$resource","id","update","method","CommentsNewController","$http","addComment","comments","newComment","trackId","params","save","data","all","push","CommentsIndexController","getComments","query","MainController","$rootScope","logout","secureState","e","toState","main","controllerName","name","message","isAuthenticated","currentUserId","getPayload","protectedStates","includes","preventDefault","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","soundcloudService","getCode","console","log","code","match","soundcloud","restrict","replace","scope","width","height","template","link","$scope","src","Track","TracksIndexController","User","addLike","event","track","index","tracksIndex","currentUser","like_ids","indexOf","splice","likes","reload","get","TracksNewController","create","tracksNew","TracksShowController","createComment","tracksShow","deleteTrack","$remove","track_id","delete","TracksEditController","tracksEdit","UsersIndexController","usersIndex","UsersShowController","checkUser","usersShow","current_user","deleteUser","createTrack","newTrack","payload","UsersEditController","usersEdit","angular","module","constant","window","location","hostname","config","$inject","factory","service","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n.constant('API_URL', window.location.hostname === 'localhost' ? 'http://localhost:3000/api' : 'https://ruthlessmuzic-api.herokuapp.com/api')\n  .config(Auth)\n  .config(WhitelistSrc);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n\nWhitelistSrc.$inject = ['$sceDelegateProvider'];\nfunction WhitelistSrc($sceDelegateProvider) {\n  $sceDelegateProvider.resourceUrlWhitelist([\n    // Allow same origin resource loads.\n    'self',\n    // Allow loading from our assets domain.  Notice the difference between * and **.\n    'https://w.soundcloud.com/**'\n  ]);\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('tracksIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('finalProject')\n  .controller('CommentsNewController', CommentsNewController)\n  .controller('CommentsIndexController', CommentsIndexController);\n\nCommentsNewController.$inject = ['$http', 'Comment', '$state'];\n\nfunction CommentsNewController($http, Comment, $state) {\n  const comments = this;\n  comments.all = [];\n  comments.addComment = addComment;\n  comments.newComment = {};\n  comments.trackId = $state.params.trackId;\n\n  function addComment() {\n    comments.newComment.trackId = $state.params.trackId;\n    Comment.save(comments.newComment)\n      .then((data) => {\n        comments.all.push(data);\n        comments.newComment = {};\n        $state.go('commentsIndex', { trackId: $state.params.trackId });\n      });\n  }\n\n}\n\nCommentsIndexController.$inject = ['Comment', '$state'];\nfunction CommentsIndexController(Comment, $state){\n  const comments = this;\n  comments.all = [];\n\n  comments.trackId = $state.params.trackId;\n\n  function getComments() {\n    Comment.query($state.params)\n      .then((data) => {\n        comments.all = data;\n      });\n  }\n\n  getComments();\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.controllerName = toState.name;\n    main.message = null;\n    if ($auth.isAuthenticated()) {\n      main.currentUserId = $auth.getPayload().id;\n    }\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider ) {\n  $stateProvider\n\n  //USER  REGISTER AND LOGIN ROUTES\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n\n  //TRACKS ROUTES\n  .state('tracksIndex', {\n    url: '/tracks',\n    templateUrl: '/templates/tracksIndex.html',\n    controller: 'TracksIndexController as tracksIndex'\n  })\n  .state('tracksShow', {\n    url: '/tracks/:id',\n    templateUrl: '/templates/tracksShow.html',\n    controller: 'TracksShowController as tracksShow'\n  })\n  .state('tracksEdit', {\n    url: '/tracks/:id/edit',\n    templateUrl: '/templates/tracksEdit.html',\n    controller: 'TracksEditController as tracksEdit'\n  })\n\n  //OTHER ROUTES\n  // .state('home', {\n  //   url: '/',\n  //   templateUrl: '/templates/home.html'\n  // })\n  .state('about', {\n    url: '/about',\n    templateUrl: '/templates/about.html'\n  });\n\n  $urlRouterProvider.otherwise('login');\n}\n","angular.module('finalProject')\n  .service('soundcloudService', soundcloudService);\n\nfunction soundcloudService() {\n  function getCode(url) {\n    console.log('URL', url);\n    let code = null;\n    const match = url.match(/tracks\\/([0-9]+)/);\n    if(match) code = match[1];\n    console.log('CODE', code);\n    return code;\n  }\n  this.getCode = getCode;\n}\n","angular.module('finalProject')\n  .directive('soundcloud', soundcloud);\n\nfunction soundcloud() {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      id: '@',\n      width: '@',\n      height: '@'\n    },\n    template: '<iframe src=\"{{ src }}\" width=\"{{ width }}\" height=\"{{ height }}\" scrolling=\"no\" frameborder=\"no\" color=black_white></iframe>',\n    link($scope) {\n      $scope.src = `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${$scope.id}&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true`;\n    }\n  };\n}\n","angular.module('finalProject')\n  .factory('Track', Track);\n\nTrack.$inject = ['$resource', 'API_URL'];\nfunction Track($resource, API_URL) {\n  return new $resource(`${API_URL}/tracks/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('TracksIndexController', TracksIndexController)\n.controller('TracksShowController', TracksShowController)\n.controller('TracksEditController', TracksEditController);\n\n\nTracksIndexController.$inject = ['Track', '$state', '$auth', 'User'];\nfunction TracksIndexController(Track, $state, $auth, User) {\n  const tracksIndex = this;\n  if($auth.isAuthenticated()) {\n    tracksIndex.currentUser = User.get({id: $auth.getPayload().id});\n  }\n\n  tracksIndex.all = Track.query();\n  tracksIndex.addLike = addLike;\n\n  function addLike(event, track) {\n    console.log('event', event);\n    // event.preventDefault();\n    // event.stopPropagation();\n    const index = tracksIndex.currentUser.like_ids.indexOf(track.id);\n    if(index > -1) {\n      tracksIndex.currentUser.like_ids.splice(index, 1);\n      track.likes--;\n    } else {\n      tracksIndex.currentUser.like_ids.push(track.id);\n      track.likes++;\n    }\n    User.update({id: tracksIndex.currentUser.id}, tracksIndex.currentUser, (user) => {\n      $state.reload();\n    });\n  }\n\n}\n\nTracksNewController.$inject = ['Track', '$state'];\nfunction TracksNewController(Track, $state) {\n  const tracksNew = this;\n\n  tracksNew.track = {};\n\n  function create() {\n    Track.save(tracksNew.track, () => {\n      $state.go('tracksIndex');\n    });\n  }\n\n  tracksNew.create = create;\n}\n\nTracksShowController.$inject = ['Track', '$state', 'Comment', '$auth', 'User'];\nfunction TracksShowController(Track, $state, Comment, $auth, User) {\n  // const payload = $auth.getPayload();\n  // const current_user = payload;\n  const tracksShow = this;\n  if($auth.isAuthenticated()) {\n    tracksShow.currentUser = User.get({id: $auth.getPayload().id});\n  }\n\n  tracksShow.track = Track.get($state.params);\n\n  // function checkUser() {\n  //   console.log('tracksShow.track.user.id', tracksShow.track.user.id);\n  //   console.log('current_user.id', current_user.id);\n  //   if (tracksShow.track.user.id === current_user.id) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // }\n\n  tracksShow.newComment = {\n    track_id: $state.params.id\n  };\n\n  function createComment() {\n    Comment.save(tracksShow.newComment, () => {\n      $state.reload();\n    });\n  }\n\n  tracksShow.createComment = createComment;\n\n  function addLike() {\n    const index = tracksShow.currentUser.like_ids.indexOf(tracksShow.track.id);\n    if(index > -1) {\n      tracksShow.currentUser.like_ids.splice(index, 1);\n      tracksShow.track.likes--;\n    } else {\n      tracksShow.currentUser.like_ids.push(tracksShow.track.id);\n      tracksShow.track.likes++;\n    }\n    User.update({id: tracksShow.currentUser.id}, tracksShow.currentUser, () => {\n      $state.reload();\n    });\n  }\n\n\n  tracksShow.addLike = addLike;\n\n  function deleteTrack() {\n    tracksShow.track.$remove(() => {\n      $state.go('tracksIndex');\n    });\n  }\n\n  // tracksShow.checkUser = checkUser;\n  tracksShow.delete = deleteTrack;\n  tracksShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nTracksEditController.$inject = ['Track', '$state', '$auth'];\nfunction TracksEditController(Track, $state, $auth) {\n  const tracksEdit = this;\n\n  tracksEdit.track = Track.get($state.params);\n\n  function update() {\n    Track.update({id: tracksEdit.track.id}, tracksEdit.track, () => {\n      $state.go('tracksShow', $state.params);\n    });\n  }\n  tracksEdit.update = update;\n  tracksEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User', '$auth'];\nfunction UsersIndexController(User, $auth) {\n  const usersIndex = this;\n  const payload = $auth.getPayload();\n  const current_user = payload;\n\n  if($auth.isAuthenticated()) {\n    usersIndex.currentUser = User.get({id: $auth.getPayload().id});\n  }\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Track'];\nfunction UsersShowController(User, $state, $auth, Track) {\n  const usersShow = this;\n  const payload = $auth.getPayload();\n  const current_user = payload;\n\n  usersShow.user = User.get($state.params);\n\n  function checkUser() {\n    console.log('usersShow.user.id', usersShow.user.id);\n    console.log('current_user.id', current_user.id);\n    if (usersShow.user.id === current_user.id) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.newTrack = {};\n  function createTrack() {\n    Track.save(usersShow.newTrack, () => {\n      $state.reload();\n    });\n  }\n\n  usersShow.checkUser = checkUser;\n  usersShow.createTrack = createTrack;\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}