{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/router.js","js/models/track.js","js/controllers/tracks.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Track","$resource","id","update","method","TracksIndexController","tracksIndex","all","query","TracksShowController","deleteTrack","tracksShow","track","$remove","get","params","delete","TracksEditController","tracksEdit","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider ) {\n  $stateProvider\n\n  //USER  REGISTER AND LOGIN ROUTES\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n\n  //TRACKS ROUTES\n  .state('tracksIndex', {\n    url: '/tracks',\n    templateUrl: '/templates/tracksIndex.html',\n    controller: 'TracksIndexController as tracksIndex'\n  })\n  .state('tracksShow', {\n    url: '/tracks/:id',\n    templateUrl: '/templates/tracksShow.html',\n    controller: 'TracksShowController as tracksShow'\n  })\n  .state('tracksEdit', {\n    url: '/tracks/:id/edit',\n    templateUrl: '/templates/tracksEdit.html',\n    controller: 'TracksEditController as tracksEdit'\n  })\n\n  //OTHER ROUTES\n  .state('about', {\n    url: '/about',\n    templateUrl: '/templates/about.html'\n  });\n\n  $urlRouterProvider.otherwise('/tracks');\n}\n","angular.module('finalProject')\n  .factory('Track', Track);\n\nTrack.$inject = ['$resource', 'API_URL'];\nfunction Track($resource, API_URL) {\n  return new $resource(`${API_URL}/tracks/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TracksIndexController', TracksIndexController)\n  .controller('TracksShowController', TracksShowController)\n  .controller('TracksEditController', TracksEditController);\n\n\nTracksIndexController.$inject = ['Track'];\nfunction TracksIndexController(Track) {\n  const tracksIndex = this;\n\n  tracksIndex.all = Track.query();\n}\n\nTracksShowController.$inject = ['Track', '$state', '$auth'];\nfunction TracksShowController(Track, $state, $auth) {\n  const tracksShow = this;\n\n  tracksShow.track = Track.get($state.params);\n\n  function deleteTrack() {\n    tracksShow.track.$remove(() => {\n      $state.go('tracksIndex');\n    });\n  }\n  tracksShow.delete = deleteTrack;\n  tracksShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nTracksEditController.$inject = ['Track', '$state', '$auth'];\nfunction TracksEditController(Track, $state, $auth) {\n  const tracksEdit = this;\n\n  tracksEdit.track = Track.get($state.params);\n\n  function update() {\n    Track.update({id: tracksEdit.track.id}, tracksEdit.track, () => {\n      $state.go('tracksShow', $state.params);\n    });\n  }\n  tracksEdit.update = update;\n  tracksEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}