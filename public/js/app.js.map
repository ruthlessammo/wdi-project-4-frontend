{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/comments.js","js/controllers/main.js","js/router.js","js/directives/soundcloud.js","js/services/soundcloud.js","js/models/track.js","js/controllers/tracks.js","js/services/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","WhitelistSrc","$sceDelegateProvider","resourceUrlWhitelist","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","CommentsNewController","$http","Comment","addComment","comments","newComment","trackId","params","save","data","all","push","CommentsIndexController","getComments","query","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","soundcloud","restrict","replace","scope","id","width","height","template","link","$scope","src","soundcloudService","getCode","console","log","code","match","Track","$resource","update","method","TracksIndexController","tracksIndex","TracksNewController","create","tracksNew","track","TracksShowController","createComment","tracksShow","reload","deleteTrack","$remove","get","delete","TracksEditController","tracksEdit","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","createTrack","newTrack","UsersEditController","usersEdit","angular","module","constant","config","$inject","directive","service","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth)\n  .config(WhitelistSrc);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n\nWhitelistSrc.$inject = ['$sceDelegateProvider'];\nfunction WhitelistSrc($sceDelegateProvider) {\n  $sceDelegateProvider.resourceUrlWhitelist([\n    // Allow same origin resource loads.\n    'self',\n    // Allow loading from our assets domain.  Notice the difference between * and **.\n    'https://w.soundcloud.com/**'\n  ]);\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular\n  .module('finalProject')\n  .controller('CommentsNewController', CommentsNewController)\n  .controller('CommentsIndexController', CommentsIndexController);\n\nCommentsNewController.$inject = ['$http', 'Comment', '$state'];\n\nfunction CommentsNewController($http, Comment, $state) {\n  const comments = this;\n  comments.all = [];\n  comments.addComment = addComment;\n  comments.newComment = {};\n  comments.trackId = $state.params.trackId;\n\n  function addComment() {\n    comments.newComment.trackId = $state.params.trackId;\n    Comment.save(comments.newComment)\n      .then((data) => {\n        comments.all.push(data);\n        comments.newComment = {};\n        $state.go('commentsIndex', { trackId: $state.params.trackId });\n      });\n  }\n\n}\n\nCommentsIndexController.$inject = ['Comment', '$state'];\nfunction CommentsIndexController(Comment, $state){\n  const comments = this;\n  comments.all = [];\n\n  comments.trackId = $state.params.trackId;\n\n  function getComments() {\n    Comment.query($state.params)\n      .then((data) => {\n        comments.all = data;\n      });\n  }\n\n  getComments();\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider ) {\n  $stateProvider\n\n  //USER  REGISTER AND LOGIN ROUTES\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n\n  //TRACKS ROUTES\n  .state('tracksIndex', {\n    url: '/tracks',\n    templateUrl: '/templates/tracksIndex.html',\n    controller: 'TracksIndexController as tracksIndex'\n  })\n  .state('tracksShow', {\n    url: '/tracks/:id',\n    templateUrl: '/templates/tracksShow.html',\n    controller: 'TracksShowController as tracksShow'\n  })\n  .state('tracksEdit', {\n    url: '/tracks/:id/edit',\n    templateUrl: '/templates/tracksEdit.html',\n    controller: 'TracksEditController as tracksEdit'\n  })\n\n  //OTHER ROUTES\n  .state('about', {\n    url: '/about',\n    templateUrl: '/templates/about.html'\n  });\n\n  $urlRouterProvider.otherwise('/tracks');\n}\n","angular.module('finalProject')\n  .directive('soundcloud', soundcloud);\n\nfunction soundcloud() {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      id: '@',\n      width: '@',\n      height: '@'\n    },\n    template: '<iframe src=\"{{ src }}\" width=\"{{ width }}\" height=\"{{ height }}\" scrolling=\"no\" frameborder=\"no\"></iframe>',\n    link($scope) {\n      $scope.src = `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${$scope.id}&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true`;\n    }\n  };\n}\n","angular.module('finalProject')\n  .service('soundcloudService', soundcloudService);\n\nfunction soundcloudService() {\n  function getCode(url) {\n    console.log('URL', url);\n    let code = null;\n    const match = url.match(/tracks\\/([0-9]+)/);\n    if(match) code = match[1];\n    console.log('CODE', code);\n    return code;\n  }\n  this.getCode = getCode;\n}\n","angular.module('finalProject')\n  .factory('Track', Track);\n\nTrack.$inject = ['$resource', 'API_URL'];\nfunction Track($resource, API_URL) {\n  return new $resource(`${API_URL}/tracks/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TracksIndexController', TracksIndexController)\n  .controller('TracksShowController', TracksShowController)\n  .controller('TracksEditController', TracksEditController);\n\n\nTracksIndexController.$inject = ['Track'];\nfunction TracksIndexController(Track) {\n  const tracksIndex = this;\n\n  tracksIndex.all = Track.query();\n}\n\nTracksNewController.$inject = ['Track', '$state'];\nfunction TracksNewController(Track, $state) {\n  const tracksNew = this;\n\n  tracksNew.track = {};\n\n  function create() {\n    Track.save(tracksNew.track, () => {\n      $state.go('tracksIndex');\n    });\n  }\n\n  tracksNew.create = create;\n}\n\nTracksShowController.$inject = ['Track', '$state', '$auth'];\nfunction TracksShowController(Track, $state, $auth) {\n  const tracksShow = this;\n\n  tracksShow.track = Track.get($state.params);\n\n  tracksShow.newComment = {};\n  function createComment() {\n    Track.save(tracksShow.newComment, () => {\n      $state.reload();\n    });\n  }\n\n  tracksShow.createComment = createComment;\n\n  function deleteTrack() {\n    tracksShow.track.$remove(() => {\n      $state.go('tracksIndex');\n    });\n  }\n\n  tracksShow.delete = deleteTrack;\n  tracksShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nTracksEditController.$inject = ['Track', '$state', '$auth'];\nfunction TracksEditController(Track, $state, $auth) {\n  const tracksEdit = this;\n\n  tracksEdit.track = Track.get($state.params);\n\n  function update() {\n    Track.update({id: tracksEdit.track.id}, tracksEdit.track, () => {\n      $state.go('tracksShow', $state.params);\n    });\n  }\n  tracksEdit.update = update;\n  tracksEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Track'];\nfunction UsersShowController(User, $state, $auth, Track) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.newTrack = {};\n  function createTrack() {\n    Track.save(usersShow.newTrack, () => {\n      $state.reload();\n    });\n  }\n\n  usersShow.createTrack = createTrack;\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}